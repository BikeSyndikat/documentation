* Debian Linux server
** Host names / A records
*** ifbma.org
*** dev.ifbma.org
*** www.ifbma.org
*** bikesyndikat-shop.com
*** www.bikesyndikat-shop.com
** Host names / port forwards
*** planlibre.de
*** plan-libre.de
** let's encrypt
*** Installation
#+BEGIN_SRC
git clone https://github.com/certbot/certbot
cd certbot
#+END_SRC
*** Configuration
#+BEGIN_SRC
/etc/init.d/apache2 stop
# kill the port forward ssh
nohup ssh -f -p 24 -R :80:localhost:80 -R :443:localhost:443 root@planlibre.de 'echo test;while true;do sleep 3;done;' &
./certbot-auto certonly -a standalone -d ifbma.org -d www.ifbma.org -d dev.ifbma.org -d planlibre.de -d plan-libre.de
#+END_SRC
*** Running
**** Apache
Add to each virtual host a 
#+BEGIN_SRC
NameVirtualHost *:443

<VirtualHost *:80>
  ServerName www.ifbma.org
  ServerAlias ifbma.org
  ServerAlias dev.ifbma.org
  Redirect / https://ifbma.org/
</VirtualHost>
#+END_SRC
and a 

#+BEGIN_SRC
SSLEngine on
SSLCertificateFile      /etc/letsencrypt/live/ifbma.org/cert.pem
SSLCertificateKeyFile   /etc/letsencrypt/live/ifbma.org/privkey.pem
SSLCertificateChainFile /etc/letsencrypt/live/ifbma.org/fullchain.pem
#SSLCARevocationPath /etc/apache2/ssl.crl/
#SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl
SSLProtocol all -SSLv2 -SSLv3
SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA
SSLOptions +StrictRequire
SSLHonorCipherOrder on
SSLCompression off
#+END_SRC
**** wildfly
***** Import into ~/home/wildfly/.keystore~
There has to be a corresponing line in the server configuration, like
the ssl/keystore one in:
#+BEGIN_SRC
             <security-realm name="ApplicationRealm">
                <server-identities>
                    <ssl>
                        <keystore path=".keystore" relative-to="user.home" keystore-password="changeit" alias="s1as" key-password="changeit"/>
                    </ssl>
                </server-identities>
                <authentication>
                    <local default-user="$local" allowed-users="*" skip-group-loading="true"/>
                    <properties path="application-users.properties" relative-to="jboss.server.config.dir"/>
                </authentication>
                <authorization>
                    <properties path="application-roles.properties" relative-to="jboss.server.config.dir"/>
                </authorization>
            </security-realm>
#+END_SRC
***** convert
#+BEGIN_SRC
openssl pkcs12 -inkey /etc/letsencrypt/live/ifbma.org/privkey.pem \
 -in /etc/letsencrypt/live/ifbma.org/cert.pem -export -name s1as \
 -out /home/wildfly/device-ip.pkcs12
#+END_SRC
***** import
#+BEGIN_SRC
keytool -delete -alias s1as -keystore /home/wildfly/.keystore
keytool -importkeystore -srckeystore /home/wildfly/device-ip.pkcs12 \
 -srcstoretype PKCS12 -keystore /home/wildfly/.keystore

su - wildfly
jboss-cli.sh --connect <<<EOF
:reload
EOF
tail -f ${WILDFLYDIR}/standalone/log/server.log
#+END_SRC
**** openfire
***** short version
It is also possible to run this analogous to the wildfly procedure. Use
that openssl conversion then.
#+BEGIN_SRC
keytool -delete -alias dev.ifbma.org -storepass changeit \
 -keystore /etc/openfire/security/keystore
keytool -importkeystore -srckeystore /home/wildfly/device-ip.pkcs12 \
 -srcstoretype PKCS12 -keystore /etc/openfire/security/keystore
service openfire restart
#+END_SRC
***** convert as full chain
Different to wildfly, export the full chain, use the password used in
openfire and as a name the jabber domain.
#+BEGIN_SRC
openssl pkcs12 -inkey /etc/letsencrypt/live/ifbma.org/privkey.pem \
 -in /etc/letsencrypt/live/ifbma.org/fullchain.pem -export -name dev.ifbma.org \
 -out /etc/openfire/fullchain.pkcs12 -passout pass:changeit
#+END_SRC
***** import from full chain
#+BEGIN_SRC
keytool -delete -alias dev.ifbma.org -storepass changeit \
 -keystore /etc/openfire/security/keystore
keytool -importkeystore -srckeystore /etc/openfire/fullchain.pkcs12 \
 -srcstoretype PKCS12 -destkeystore /etc/openfire/security/keystore \
 -deststorepass changeit -destkeypass changeit -srcstorepass changeit
 -alias dev.ifbma.org
service openfire restart
#+END_SRC
